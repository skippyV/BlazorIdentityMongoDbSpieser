@page "/create-role"

@inject NavigationManager NavigationManager
@inject RoleManager<ApplicationRole> _roleManager;

<EditForm id="create-role-form" Model="role" OnSubmit="FormSubmitted" FormName="CreateRoleForm">
    <h4>Create New Role</h4>
    <div>
        <label>
            Name:
            <InputText @bind-Value="role.Name" />
        </label>
    </div>

    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    //private ApplicationRole role { get; set; }
    private Role role { get; set; }

    protected override void OnInitialized() => role ??= new();

    private string LastSubmitResult = "";
    //private void Submit() => Logger.LogInformation("Id = {Id}", Model?.Id);
    async Task FormSubmitted(EditContext editContext)
    {

        bool formIsValid = editContext.Validate();
        LastSubmitResult =
          formIsValid
          ? "Success - form was valid"
          : "Failure - form was invalid";

        if (formIsValid)
        {
            var result = await _roleManager.CreateAsync(new ApplicationRole() { Name = role.Name });
            if (result.Succeeded)
            {
                // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=532713
                //
                // Send an email with this link
                // var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                //
                // var callbackUrl = Url.Action("ConfirmEmail", "Account", new { userId = user.Id, code = code }, protocol: HttpContext.Request.Scheme);
                //
                // await _emailSender.SendEmailAsync(model.Email, "Confirm your account",
                //    "Please confirm your account by clicking this link: <a href=\"" + callbackUrl + "\">link</a>");
                //
                // await _signInManager.SignInAsync(user, isPersistent: false);
                //
                // _logger.LogInformation(3, "User created a new account with password.");
                //
                // return RedirectToLocal(returnUrl);
                NavigationManager.NavigateTo("/submitted-test");
            }
            else
            {
                string errorMessage;
                if (result.Errors.FirstOrDefault() is not null)
                {
                    errorMessage = result.Errors.FirstOrDefault()!.Description;
                    NavigationManager.NavigateTo($"/Error/{errorMessage}");
                }
                else
                {
                    NavigationManager.NavigateTo($"/Error");
                }

            }
        }
    }
}